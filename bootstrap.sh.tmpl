#!/bin/bash
set -e

## all "things" starting with TMPL_ will be replaced by the build script
PLAIN_RSA_KEYS_URL=https://TMPL_DOCKER_TMP_BUCKET.TMPL_REGION.amazonaws.com/TMPL_PSEUDO_BUCKET_DIR/plain_rsa_keys.tar.gz.enc
ENCRYPTED_RSA_KEYS_URL=https://TMPL_DOCKER_TMP_BUCKET.TMPL_REGION.amazonaws.com/TMPL_PSEUDO_BUCKET_DIR/encrypted_rsa_keys.tar.gz.enc
S3_ENCRYPTION_KEY="TMPL_S3_ENCRYPTION_KEY"

curl "$PLAIN_RSA_KEYS_URL" | gpg --decrypt --batch --yes --passphrase $S3_ENCRYPTION_KEY 2>/dev/null | tar -C / -xvz
curl "$ENCRYPTED_RSA_KEYS_URL" | gpg --decrypt --batch --yes --passphrase $S3_ENCRYPTION_KEY 2>/dev/null | tar -C / -xvz
chmod -R 7777 /plain_rsa_keys /encrypted_rsa_keys

export DEBIAN_FRONTEND=noninteractive
export PASSWORD=$(openssl rand -base64 32 | openssl md5 | awk '{print $2}')

pushd /tmp
hg clone https://bitbucket.org/eradman/entr
pushd entr
hg update entr-3.2
./configure
make test
make install
popd
rm -rf entr
popd

## install forego (go implementation of foreman)
mkdir -p /usr/local/bin
pushd /usr/local/bin
wget https://godist.herokuapp.com/projects/ddollar/forego/releases/current/linux-amd64/forego
chmod +x forego
popd

## install statically compiled ffmpeg
#pushd /tmp
#wget http://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz
#tar -xJf ffmpeg-release-64bit-static.tar.xz
#mv ffmpeg-*-64bit-static/ffmpeg /usr/local/bin/ffmpeg
#chmod +x /usr/local/bin/ffmpeg
#popd

## install awscli via python3 pip for latest version
#pip3 install awscli || true

## install powerline status
pip3 install powerline-status || true

## disable ssh password authentication
sed -ri "s/#PasswordAuthentication yes/PasswordAuthentication no/g" /etc/ssh/sshd_config
## if it was in there and not commented out, just do the same maneuver
sed -ri "s/PasswordAuthentication yes/PasswordAuthentication no/g" /etc/ssh/sshd_config

## install golang
pushd /tmp
wget http://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
tar -C /usr/local -xzf go$GOLANG_VERSION.linux-amd64.tar.gz
rm go$GOLANG_VERSION.linux-amd64.tar.gz
popd
cat <<EOF>/etc/profile.d/golang.sh
export PATH=\$PATH:/usr/local/go/bin
EOF
chmod +x /etc/profile.d/golang.sh
## so we can now use go further down
source /etc/profile.d/golang.sh

## install s3gof3r
pushd /tmp
wget https://github.com/rlmcpherson/s3gof3r/releases/download/v"$S3GOF3R_VERSION"/gof3r_"$S3GOF3R_VERSION"_linux_amd64.tar.gz
tar zxf gof3r_"$S3GOF3R_VERSION"_linux_amd64.tar.gz
mv gof3r_"$S3GOF3R_VERSION"_linux_amd64/gof3r /usr/local/bin/gof3r
rm -rf gof3r_"$S3GOF3R_VERSION"_*
popd

### install rbenv and rubies

pushd /usr/local
test -e /usr/local/rbenv || git clone https://github.com/sstephenson/rbenv.git
cat << EOF > /etc/profile.d/rbenv.sh
export PATH="/usr/local/rbenv/bin:\$PATH"
export RBENV_ROOT=/usr/local/rbenv
eval "\$(rbenv init -)"
upgrade_rbenv()
{
        pushd /usr/local/rbenv
        git pull
        popd
        pushd /usr/local/rbenv/plugins/ruby-build
        git pull
        popd
}
EOF

mkdir -p rbenv/plugins
test -e /usr/local/rbenv/plugins/ruby-build || git clone https://github.com/sstephenson/ruby-build.git rbenv/plugins/ruby-build

echo 'export PATH="/usr/local/rbenv/plugins/ruby-build/bin:$PATH"' > /etc/profile.d/ruby-build.sh

#cat << EOF > /etc/profile.d/jruby.sh
#jruby_client()
#{
#  export JRUBY_OPTS="--1.9 -J-noverify -Xcompile.invokedynamic=false -J-Dfile.encoding=UTF8 -J-Xms512m -J-Xmx2048m -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-XX:+UseCompressedOops --server"
#}
#
#jruby_server()
#{
#  export JRUBY_OPTS="--1.9 -J-noverify -Xcompile.invokedynamic=false -J-Dfile.encoding=UTF8 -J-Xms512m -J-Xmx4096m -J-XX:+TieredCompilation -J-XX:+UseCompressedOops --server"
#}
#EOF

chmod +x /etc/profile.d/ruby-build.sh
chmod +x /etc/profile.d/rbenv.sh
#chmod +x /etc/profile.d/jruby.sh


source /etc/profile

upgrade_rbenv

#test -e /usr/local/rbenv/versions/$RBENV_JRUBY || rbenv install $RBENV_JRUBY
for RBENV_MRI in $RBENV_MRIS; do
  test -e /usr/local/rbenv/versions/$RBENV_MRI || rbenv install $RBENV_MRI
  rbenv shell $RBENV_MRI
  gem install bundler --no-ri --no-rdoc
  gem install md2man --no-ri --no-rdoc
  rbenv rehash
done

## Regardless of version, these two will always work
#ln -s /usr/local/rbenv/versions/$RBENV_JRUBY /usr/local/rbenv/versions/jruby
ln -s /usr/local/rbenv/versions/$DEFAULT_MRI /usr/local/rbenv/versions/mri

#jruby_client
#rbenv shell $RBENV_JRUBY
#gem install bundler --no-ri --no-rdoc

rbenv shell $DEFAULT_MRI
rbenv global $DEFAULT_MRI
gem install bundler --no-ri --no-rdoc
gem install md2man --no-ri --no-rdoc
rbenv rehash

groupadd -g $USER_GID $USER
useradd -g $USER_GID -u $USER_UID --password `mkpasswd $PASSWORD` -m -s /bin/zsh $USER

groupadd rbenv || true ## ignore if it's there already

adduser $USER rbenv

rbenv global $RBENV_MRI

chown -R $USER:rbenv /usr/local/rbenv
chmod -R ug+rwx /usr/local/rbenv

## allow passwordless sudo

cat << EOF > /etc/sudoers.d/100-allow-app-user
$USER ALL=(ALL) NOPASSWD:ALL
EOF

chown root:root /etc/sudoers.d/100-allow-app-user
chmod 0440 /etc/sudoers.d/100-allow-app-user

## install direnv -- needs md2man gem, see above
pushd /tmp
git clone https://github.com/zimbatm/direnv
pushd direnv
make install
popd
rm -rf direnv
popd


## enable user local services for the configured user

mkdir -p /etc/sv/runsvdir-$USER
cat << EOF > /etc/sv/runsvdir-$USER/run
#!/bin/sh
exec 2>&1
exec chpst -u$USER runsvdir /home/$USER/Local/service
EOF

chmod +x /etc/sv/runsvdir-$USER/run

mkdir -p /etc/sv/runsvdir-$USER/log
cat << EOF > /etc/sv/runsvdir-$USER/log/run
#!/bin/sh
mkdir -p /var/log/runsvdir-$USER
exec svlogd -tt /var/log/runsvdir-$USER
EOF

chmod +x /etc/sv/runsvdir-$USER/log/run

ln -s /etc/sv/runsvdir-$USER /etc/service/

su $USER<<EOUS

export HOME=/home/$USER
cd ~

cat << EOF > .secrets

export DEVDIR=\\\$HOME/Development
EOF

git config --global user.email "$EMAIL"
git config --global user.name "$NAME"

cat << EOF > .gemrc
---
:backtrace: false
:benchmark: false
:bulk_threshold: 1000
:sources:
- http://rubygems.org/
:update_sources: true
:verbose: true
install: "--no-rdoc --no-ri"
update: "--no-rdoc --no-ri"
gem: "--no-ri --no-rdoc"
EOF

mkdir -p .ssh
cat /plain_rsa_keys/authorized_keys > .ssh/authorized_keys

cat /plain_rsa_keys/id_rsa > .ssh/id_rsa

cat /plain_rsa_keys/id_rsa.pub > .ssh/id_rsa.pub

cat << EOF > .ssh/config
IdentityFile /home/$USER/.ssh/id_rsa

Host github github.com
  StrictHostKeyChecking no
  User git
  Hostname github.com
  PreferredAuthentications publickey

EOF

chmod go-rwx .ssh/id_rsa
chmod go-rwx .ssh/authorized_keys
chmod go-wx .ssh/config

## local user services

mkdir -p sv
mkdir -p service

git clone git://github.com/andsens/homeshick.git .homesick/repos/homeshick
pushd .homesick/repos/homeshick
git checkout testing
popd
/bin/bash<<EOF
export HOME=/home/$USER
cd ~
echo 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \\\$*' > ssh
chmod +x ssh
export GIT_TRACE=1
export GIT_SSH="./ssh"
source ~/.homesick/repos/homeshick/homeshick.sh
homeshick --batch clone git@github.com:johnae/dotfiles
homeshick --batch clone git@github.com:johnae/dotmux
homeshick --batch clone git@github.com:johnae/dotvim
homeshick link --force
echo "Setting default ruby..."
source /etc/profile.d/rbenv.sh
rbenv global mri
#sed -ri "s/NeoBundleCheck/\"NeoBundleCheck/g" ~/.vimrc 
#vim +NeoBundleUpdate! +qall 2>&1
EOF

## I think vim exits above in such a way that anything after doesn't run
#/bin/bash<<EOF
#export HOME=/home/$USER
#cd ~
#echo 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \\\$*' > ssh
#chmod +x ssh
#export GIT_TRACE=1
#export GIT_SSH="./ssh"
#source ~/.homesick/repos/homeshick/homeshick.sh
##rm -f ~/.vimrc
#echo "Relinking homeshick dotfiles..."
#homeshick link --force
#
#echo "Setting default ruby..."
#source /etc/profile.d/rbenv.sh
#rbenv global mri
#EOF


/bin/zsh<<EOF
export HOME=/home/$USER
cd ~
echo 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \\\$*' > ssh
chmod +x ssh
export GIT_TRACE=1
export GIT_SSH="./ssh"
echo "Setting up zsh..."
source ~/.zshrc
EOF

rm /home/$USER/.ssh/id_rsa*
rm /home/$USER/.ssh/authorized_keys

for SSH_FILE in \$(ls /encrypted_rsa_keys/*); do
echo "\$SSH_FILE"
cat \$SSH_FILE > /home/$USER/.ssh/\$(basename \$SSH_FILE)
chmod 0600 /home/$USER/.ssh/\$(basename \$SSH_FILE)
done

EOUS

## remove any downloaded rsa files
rm -rf /plain_rsa_keys /encrypted_rsa_keys

mkdir -p /etc/sv
mkdir -p /etc/service
mkdir -p /etc/sv/sshd/log
cat << EOF > /etc/sv/sshd/run
#!/bin/bash

mkdir -p /var/run/sshd
exec /usr/sbin/sshd -D
EOF
cat << EOF > /etc/sv/sshd/log/run
#!/bin/bash

mkdir -p /var/log/sshd
exec svlogd -tt /var/log/sshd
EOF

chmod +x /etc/sv/sshd/run
chmod +x /etc/sv/sshd/log/run

ln -s /etc/sv/sshd /etc/service/

sed -ri 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config

cat <<EOF> /etc/sudoers.d/100_users
$USER ALL=(ALL) NOPASSWD:ALL
Defaults:$USER env_keep += "SSH_AUTH_SOCK"
EOF

chmod 0440 /etc/sudoers.d/100_users

cd /home/$USER
echo "Will now tar the user directory..."
ls -lah
tar cf /home/$USER.tar .
cd /
rm -rf /home/$USER
mkdir -p /home/$USER
chown -R $USER:$USER /home/$USER

cat <<EOF> /setup_user
#!/bin/bash

defined () {
    [[ \${!1-X} == \${!1-Y} ]]
}

has_value () {
    if defined \$1; then
        if [[ -n \${!1} ]]; then
            return 0
        fi
    fi
    return 1
}

if [ ! -e /home/\$USER/.bootstrapped ]; then
  if [ -e /home/\$USER.tar ]; then
    cd /home
    tar xf /home/\$USER.tar -C /home/\$USER
    touch /home/\$USER/.bootstrapped
  fi
fi
rm -f /home/\$USER.tar
chown -R \$USER:\$USER /home/\$USER
rm /setup_user
rm /etc/service/user_template
EOF

chmod +x /setup_user

mkdir -p /etc/sv/user_template
cat << EOF > /etc/sv/user_template/run
#!/bin/bash

exec /setup_user
EOF

chmod +x /etc/sv/user_template/run

ln -s /etc/sv/user_template /etc/service/

## add setup script for docker
cat <<EOF>/usr/local/bin/docker
#!/bin/bash
if [ ! -e /usr/local/bin/docker.io ]; then
  echo "Docker not installed, downloading and installing..."
  HOST_VERSION=\$(echo -e "GET /version HTTP/1.0\r\n" | sudo nc -U /var/run/docker.sock | tail -n 1 | grep -Po '"Version":.*?[^\\\\]"' | sed 's/["}]//g' | awk -F ':' '{print \$NF}')
  sudo wget https://get.docker.io/builds/Linux/x86_64/docker-\$HOST_VERSION -O /usr/local/bin/docker.io
  sudo chmod +x /usr/local/bin/docker.io
fi
sudo /usr/local/bin/docker.io \$*
EOF
chmod +x /usr/local/bin/docker

echo "Removing authorized_keys and private keys temporarily added at /plain_rsa_keys /encrypted_rsa_keys previously..."
rm -rf /plain_rsa_keys /encrypted_rsa_keys

apt-get clean
apt-get -y -q autoclean
apt-get -y -q autoremove

echo "***** USER is '$USER'"
echo "***** PASSWORD is '$PASSWORD'"
